{
  
    
        "post0": {
            "title": "_initial_post",
            "content": "My First Blog . Hello Folks! . It’s interesting, this year feels different in terms of new year’s resolutions. I think I might actually keep them. It’s interesting for me this year. This year feels different, in terms of new year’s resolutions. I think I might actually keep them and write that blog I’ve been meaning to. . Over the past two years, I’ve taken up an interest in Machine Learning and specifically Deep Learning. . It is primarily the reason for this blog and why I mention it (Appendix A). . . I’m also thinking to record what I know about the world of Power. . I’m also thinking to record what I know about: . The world of power engineering. | How I get on with my investment journey. | Anything else I find interesting and study. | . This is mainly so that I can point my colleagues or new persons to this as a sort of wiki. . We’ll see. .",
            "url": "https://stevedoesengineering.github.io/steve-the-engineer/2021/01/29/_initial_post.html",
            "relUrl": "/2021/01/29/_initial_post.html",
            "date": " • Jan 29, 2021"
        }
        
    
  
    
        ,"post1": {
            "title": "Azure cognitive services   speech to text",
            "content": "Azure Cognitive Service for Speech to Text . Today was an experiment with Azure cognitive tool kit! Its always interesting to see how use of cloud computing goes from the most remote city in the world. Still the network speeds aren’t terrible in 2021, even with the extra NETFLIX and Streaming traffic due to COVID-19 . ADD WEBSITE HERE . REASON: I wanted to try out Azure voice to text and see how well it would work. My intention for this is to take the work out of minute notes and indexing of video recordings. My ideal would be meeting minutes produced for me without effort at the end of a recording. They would then be in a format that allows search to be rapid and improved over manual. This is mainly for accountability and understanding purposes of the recorded material. . SOFTWARE: First thing, I’m doing this using python and as of this post python is up to 3.9.1. As Python is a particularly forgiving language for starting out/rapid prototyping. This version DOES NOT work with Azure cognitive tools so you will need 3.7.6 for compatibility. . ADD WEBSITE HERE . So, I’m not sure how you like to arrange things but I like to put versions of python into folders with the packages and run virtualenv [folder address and name], install cmd prompt: virtualenv path/to/folder/VenvNAME. This allows executables with py2exe to only use the packages necessary once you have worked out the nuts and bolts. . This installs the python version on PATH environmental variable into the package which is handy for isolatation and versioning. . With this installed, I was then able to install jupyter and run all the other installs from magics within a notebook (e.g. !pip install pandas) . PIP INSTALL JUPYTER . SETUP OF CHAIN: Once all set up, the following are required: . A suitable video or voice recording | To download FFMPEG source code or a binary depending on your OS and install in a location and add to PATH. | convert the video or audio via FFMPEG into a .wav format, which is necessary for the Azure API. | Install the azure cognitive Software Development Kit | Optionally, install the spx CLI, which doesn’t require knowing Python, C++ or C# etc (No Code). | Sign up for a free (for 12 months) Azure account. | Subscribe to the Speech service | find API key and Region code for input in python | I also noticed whilst going through the documentation that there is a video indexer API/Service that spits out JSON files for a similar purpose. . 1: Finding a recording shouldn’t be too hard with youtube etc available. 2: FFMPEG website - https://ffmpeg.org/ These guys are awesome, as I’m working on a windows platform I used a binary from Gyan (tip him a coffee if you do!) The executable can be placed in a folder and added to path, I decided (unwisely) to drop it in system32 folder to save hassle. 3: Use of FFMPEG is pretty easy. . I also found that you can use the convert function in VLC using the GUI but this is quite slow and clunky in the long term. Top tip for VLC is to use more options and select convert explicitedly. . ADD SCREENSHOT FFMPEG line to modify . 4: The cognitive services are pretty easy to install via jupyter with a magic and pip. . ADD PIP screenshot from notebook . 5: SPX is a “no code” command line tool, which still requires understanding the cmdline etc. So is at best a convienent way if python/jupyter is not an option. . 6: Use an existing microsoft account or create one and pass them your credit card details. 7: Once in the Azure console, the Speech API needs to be added as a service and the key and region found. . ADD SPEECH API . 8: Finding the API KEY (there are two, that can be individually regenerated) and REGION . ADD KEY and REGION screens ADD input into example code. . EXPERIENCE USING AZURE COGNITIVE SERVICE - SPEECH TO TEXT (standard models): The whole experience is pretty good. As with all things Machine Learning, the models are a good starting point but need some context. This would be no different to a human. . First go: 1 shot recognition using the example code on the Azure GitHub. It works well but is limited, it will wait 15s or end with a silence after a recognition has triggered. This means that it can’t deal with anything more than a sound bite. This is the reason that the website example that you can upload a file into has a lot of recognition started type notifications. I found that I preferred the second method of continuous recognition, which is a bit heavier but works out better. . Second go: Continuous recognition works on an event handler basis. This means that it has to be explicitly told to stop. This can be by EOF for the recording or via an event. The output from the example shows the recognising working its way from a silence and a phrase. This worked reasonably well. It struggles with multiple language based accents and pronouncation and specific domain wording. This is to be expected, and there is an option for this: custom modelling. . Speaker Recognition: There is also an addition API that can be given 20s clips of an individual and tries to then pick them out in the conversation. I found that this is heavily affected by background noise. . Video indexer: At the next opportunity I’m going to explore this option and report back seperately in its own post. Unfortunately there isn’t a python API (as of this blog). I therefore will likely have to use C#. . Using SPX on CMD: I found that redirection to file was the easiest way to complete a first run. It can take some time, depending on your recording to go through the whole thing and print to file. .",
            "url": "https://stevedoesengineering.github.io/steve-the-engineer/2021/01/29/Azure-Cognitive-Services-Speech-to-Text.html",
            "relUrl": "/2021/01/29/Azure-Cognitive-Services-Speech-to-Text.html",
            "date": " • Jan 29, 2021"
        }
        
    
  
    
        ,"post2": {
            "title": "Fastpages Notebook Blog Post",
            "content": "About . This notebook is a demonstration of some of capabilities of fastpages with notebooks. . With fastpages you can save your jupyter notebooks into the _notebooks folder at the root of your repository, and they will be automatically be converted to Jekyll compliant blog posts! . Front Matter . The first cell in your Jupyter Notebook or markdown blog post contains front matter. Front matter is metadata that can turn on/off options in your Notebook. It is formatted like this: . # &quot;My Title&quot; &gt; &quot;Awesome summary&quot; - toc:true- branch: master - badges: true - comments: true - author: Hamel Husain &amp; Jeremy Howard - categories: [fastpages, jupyter] . Setting toc: true will automatically generate a table of contents | Setting badges: true will automatically include GitHub and Google Colab links to your notebook. | Setting comments: true will enable commenting on your blog post, powered by utterances. | . The title and description need to be enclosed in double quotes only if they include special characters such as a colon. More details and options for front matter can be viewed on the front matter section of the README. . Markdown Shortcuts . A #hide comment at the top of any code cell will hide both the input and output of that cell in your blog post. . A #hide_input comment at the top of any code cell will only hide the input of that cell. . The comment #hide_input was used to hide the code that produced this. . put a #collapse-hide flag at the top of any cell if you want to hide that cell by default, but give the reader the option to show it: . import pandas as pd import altair as alt . . put a #collapse-show flag at the top of any cell if you want to show that cell by default, but give the reader the option to hide it: . cars = &#39;https://vega.github.io/vega-datasets/data/cars.json&#39; movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; sp500 = &#39;https://vega.github.io/vega-datasets/data/sp500.csv&#39; stocks = &#39;https://vega.github.io/vega-datasets/data/stocks.csv&#39; flights = &#39;https://vega.github.io/vega-datasets/data/flights-5k.json&#39; . . place a #collapse-output flag at the top of any cell if you want to put the output under a collapsable element that is closed by default, but give the reader the option to open it: . print(&#39;The comment #collapse-output was used to collapse the output of this cell by default but you can expand it.&#39;) . The comment #collapse-output was used to collapse the output of this cell by default but you can expand it. . . Interactive Charts With Altair . Charts made with Altair remain interactive. Example charts taken from this repo, specifically this notebook. . Example 1: DropDown . # use specific hard-wired values as the initial selected values selection = alt.selection_single( name=&#39;Select&#39;, fields=[&#39;Major_Genre&#39;, &#39;MPAA_Rating&#39;], init={&#39;Major_Genre&#39;: &#39;Drama&#39;, &#39;MPAA_Rating&#39;: &#39;R&#39;}, bind={&#39;Major_Genre&#39;: alt.binding_select(options=genres), &#39;MPAA_Rating&#39;: alt.binding_radio(options=mpaa)} ) # scatter plot, modify opacity based on selection alt.Chart(df).mark_circle().add_selection( selection ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=&#39;IMDB_Rating:Q&#39;, tooltip=&#39;Title:N&#39;, opacity=alt.condition(selection, alt.value(0.75), alt.value(0.05)) ) . Example 2: Tooltips . alt.Chart(df).mark_circle().add_selection( alt.selection_interval(bind=&#39;scales&#39;, encodings=[&#39;x&#39;]) ).encode( alt.X(&#39;Rotten_Tomatoes_Rating&#39;, type=&#39;quantitative&#39;), alt.Y(&#39;IMDB_Rating&#39;, type=&#39;quantitative&#39;, axis=alt.Axis(minExtent=30)), # y=alt.Y(&#39;IMDB_Rating:Q&#39;, ), # use min extent to stabilize axis title placement tooltip=[&#39;Title:N&#39;, &#39;Release_Date:N&#39;, &#39;IMDB_Rating:Q&#39;, &#39;Rotten_Tomatoes_Rating:Q&#39;] ).properties( width=500, height=400 ) . Example 3: More Tooltips . label = alt.selection_single( encodings=[&#39;x&#39;], # limit selection to x-axis value on=&#39;mouseover&#39;, # select on mouseover events nearest=True, # select data point nearest the cursor empty=&#39;none&#39; # empty selection includes no data points ) # define our base line chart of stock prices base = alt.Chart().mark_line().encode( alt.X(&#39;date:T&#39;), alt.Y(&#39;price:Q&#39;, scale=alt.Scale(type=&#39;log&#39;)), alt.Color(&#39;symbol:N&#39;) ) alt.layer( base, # base line chart # add a rule mark to serve as a guide line alt.Chart().mark_rule(color=&#39;#aaa&#39;).encode( x=&#39;date:T&#39; ).transform_filter(label), # add circle marks for selected time points, hide unselected points base.mark_circle().encode( opacity=alt.condition(label, alt.value(1), alt.value(0)) ).add_selection(label), # add white stroked text to provide a legible background for labels base.mark_text(align=&#39;left&#39;, dx=5, dy=-5, stroke=&#39;white&#39;, strokeWidth=2).encode( text=&#39;price:Q&#39; ).transform_filter(label), # add text labels for stock prices base.mark_text(align=&#39;left&#39;, dx=5, dy=-5).encode( text=&#39;price:Q&#39; ).transform_filter(label), data=stocks ).properties( width=500, height=400 ) . Data Tables . You can display tables per the usual way in your blog: . df[[&#39;Title&#39;, &#39;Worldwide_Gross&#39;, &#39;Production_Budget&#39;, &#39;Distributor&#39;, &#39;MPAA_Rating&#39;, &#39;IMDB_Rating&#39;, &#39;Rotten_Tomatoes_Rating&#39;]].head() . Title Worldwide_Gross Production_Budget Distributor MPAA_Rating IMDB_Rating Rotten_Tomatoes_Rating . 0 The Land Girls | 146083.0 | 8000000.0 | Gramercy | R | 6.1 | NaN | . 1 First Love, Last Rites | 10876.0 | 300000.0 | Strand | R | 6.9 | NaN | . 2 I Married a Strange Person | 203134.0 | 250000.0 | Lionsgate | None | 6.8 | NaN | . 3 Let&#39;s Talk About Sex | 373615.0 | 300000.0 | Fine Line | None | NaN | 13.0 | . 4 Slam | 1087521.0 | 1000000.0 | Trimark | R | 3.4 | 62.0 | . Images . Local Images . You can reference local images and they will be copied and rendered on your blog automatically. You can include these with the following markdown syntax: . ![](my_icons/fastai_logo.png) . . Remote Images . Remote images can be included with the following markdown syntax: . ![](https://image.flaticon.com/icons/svg/36/36686.svg) . . Animated Gifs . Animated Gifs work, too! . ![](https://upload.wikimedia.org/wikipedia/commons/7/71/ChessPawnSpecialMoves.gif) . . Captions . You can include captions with markdown images like this: . ![](https://www.fast.ai/images/fastai_paper/show_batch.png &quot;Credit: https://www.fast.ai/2020/02/13/fastai-A-Layered-API-for-Deep-Learning/&quot;) . . Other Elements . GitHub Flavored Emojis . Typing I give this post two :+1:! will render this: . I give this post two :+1:! . Tweetcards . Typing &gt; twitter: https://twitter.com/jakevdp/status/1204765621767901185?s=20 will render this: Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 . Youtube Videos . Typing &gt; youtube: https://youtu.be/XfoYk_Z5AkI will render this: . Boxes / Callouts . Typing &gt; Warning: There will be no second warning! will render this: . Warning: There will be no second warning! . Typing &gt; Important: Pay attention! It&#39;s important. will render this: . Important: Pay attention! It&#8217;s important. . Typing &gt; Tip: This is my tip. will render this: . Tip: This is my tip. . Typing &gt; Note: Take note of this. will render this: . Note: Take note of this. . Typing &gt; Note: A doc link to [an example website: fast.ai](https://www.fast.ai/) should also work fine. will render in the docs: . Note: A doc link to an example website: fast.ai should also work fine. . Footnotes . You can have footnotes in notebooks, however the syntax is different compared to markdown documents. This guide provides more detail about this syntax, which looks like this: . For example, here is a footnote {% fn 1 %}. And another {% fn 2 %} {{ &#39;This is the footnote.&#39; | fndetail: 1 }} {{ &#39;This is the other footnote. You can even have a [link](www.github.com)!&#39; | fndetail: 2 }} . For example, here is a footnote 1. . And another 2 . 1. This is the footnote.↩ . 2. This is the other footnote. You can even have a link!↩ .",
            "url": "https://stevedoesengineering.github.io/steve-the-engineer/jupyter/2020/02/20/test.html",
            "relUrl": "/jupyter/2020/02/20/test.html",
            "date": " • Feb 20, 2020"
        }
        
    
  
    
        ,"post3": {
            "title": "An Example Markdown Post",
            "content": "Example Markdown Post . Basic setup . Jekyll requires blog post files to be named according to the following format: . YEAR-MONTH-DAY-filename.md . Where YEAR is a four-digit number, MONTH and DAY are both two-digit numbers, and filename is whatever file name you choose, to remind yourself what this post is about. .md is the file extension for markdown files. . The first line of the file should start with a single hash character, then a space, then your title. This is how you create a “level 1 heading” in markdown. Then you can create level 2, 3, etc headings as you wish but repeating the hash character, such as you see in the line ## File names above. . Basic formatting . You can use italics, bold, code font text, and create links. Here’s a footnote 1. Here’s a horizontal rule: . . Lists . Here’s a list: . item 1 | item 2 | . And a numbered list: . item 1 | item 2 | Boxes and stuff . This is a quotation . . You can include alert boxes …and… . . You can include info boxes Images . . Code . You can format text and code per usual . General preformatted text: . # Do a thing do_thing() . Python code and output: . # Prints &#39;2&#39; print(1+1) . 2 . Formatting text as shell commands: . echo &quot;hello world&quot; ./some_script.sh --option &quot;value&quot; wget https://example.com/cat_photo1.png . Formatting text as YAML: . key: value - another_key: &quot;another value&quot; . Tables . Column 1 Column 2 . A thing | Another thing | . Tweetcards . Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 Footnotes . This is the footnote. &#8617; . |",
            "url": "https://stevedoesengineering.github.io/steve-the-engineer/markdown/2020/01/14/test-markdown-post.html",
            "relUrl": "/markdown/2020/01/14/test-markdown-post.html",
            "date": " • Jan 14, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "This website is powered by fastpages 1. . a blogging platform that natively supports Jupyter notebooks in addition to other formats. &#8617; . |",
          "url": "https://stevedoesengineering.github.io/steve-the-engineer/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page10": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://stevedoesengineering.github.io/steve-the-engineer/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}